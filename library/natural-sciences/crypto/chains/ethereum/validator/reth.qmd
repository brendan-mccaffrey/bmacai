---
title: Reth
subtitle: Running a Rust Ethereum (Reth) node, and serving a private rpc.
---

## New

Fresh Ubuntu machine, let's get it.

Install rust

```bash
# system update
sudo apt update
# install rust
sudo apt install rustc
```

Install [latest version](https://github.com/paradigmxyz/reth/releases) of reth

```bash
# download
wget -c https://github.com/paradigmxyz/reth/releases/download/v1.0.3/reth-v1.0.3-x86_64-unknown-linux-gnu.tar.gz

# open 
tar -xzf reth-v1.0.3-x86_64-unknown-linux-gnu.tar.gz

# move to bin 
mv reth /usr/bin/reth 
```

Do the same with the [latest version](https://github.com/sigp/lighthouse/releases) of lighthouse

```bash
# download
wget -c https://github.com/sigp/lighthouse/releases/download/v5.2.1/lighthouse-v5.2.1-x86_64-unknown-linux-gnu.tar.gz

# open 
tar -xzf lighthouse-v5.2.1-x86_64-unknown-linux-gnu.tar.gz

# move to bin 
mv lighthouse /usr/bin/lighthouse 
```

For each, run in new screen

```bash
# new screen
screen -S el 

# run
RUST_LOG=info reth node --full \
--http --http.corsdomain "*" --http.api all \
--ws --ws.origins "*" --ws.api all 

# ctrl-A + D to exit

# new screen
screen -S cl 

# run
lighthouse bn \
  --execution-endpoint http://localhost:8551 \
  --execution-jwt /home/ubuntu/.local/share/reth/mainnet/jwt.hex \ 
  --checkpoint-sync-url https://mainnet.checkpoint.sigp.io \
  --disable-deposit-contract-sync

# ctrl-A + D to exit
```

Check its been installed by navigating to the IP address in the browser.

Install Nginx

```bash
sudo apt update
sudo apt install nginx 
```

Navigate to `/etc/nginx/conf.d`

Create a file called `reth.conf`

```bash
sudo nano reth.conf 
```

Paste this 

```conf
server {

  listen 80;
  listen [::]:80;
  server_name 40.ip.example.16 site.example.com;

  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/nginx/ssl/site.example.com.crt;
  ssl_certificate_key /etc/nginx/ssl/site.example.com.key;

  location /xws {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_pass   http://127.0.0.1:8546/;
  }

  location /xrpc {
      proxy_redirect off;
      proxy_pass    http://127.0.0.1:8545/;
  }
}
```

And paste cloudflare origin certificates at locations 
- `/etc/nginx/ssl/site.example.com.crt`
- `/etc/nginx/ssl/site.example.com.key`


## OLD

## Overview

Running an Ethereum node post-merge consists of running a client for both the execution layer (EL) and consensus layer (CL).

## Setup

First thing is first, we need to setup our environment. This assumes you have a fresh Ubuntu machine. We first want to install Rust.

```bash
# system update
sudo apt update
# install rust
sudo apt install rustc
# install deps 
sudo apt-get install libclang-dev pkg-config build-essential
# install cargo
sudo apt install cargo

# install rustup
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

**Execution Layer Client Options**

- [Reth](https://github.com/paradigmxyz/reth) | [Book](https://paradigmxyz.github.io/reth/)
- [Geth](https://github.com/ethereum/go-ethereum) | [Docs](https://geth.ethereum.org/docs/fundamentals/command-line-options)
- [Nethermind](https://github.com/NethermindEth/nethermind) | [Docs](https://docs.nethermind.io/nethermind/)
- [Erigon](https://github.com/ledgerwatch/erigon)

**Consensus Layer Client Options**

- [Lighthouse](https://github.com/sigp/lighthouse) | [Book](https://lighthouse-book.sigmaprime.io/) | [Blog](https://lighthouse-blog.sigmaprime.io/)
- [Prysm](https://github.com/prysmaticlabs/prysm) | [Docs](https://docs.prylabs.network/docs/getting-started)

I am going to be running [Reth](https://github.com/paradigmxyz/reth) + [Lighthouse](https://github.com/sigp/lighthouse) node on a linux Ubuntu server. The following guide pertains to that specific OS, but the process is closely similar for other operating systems.

```bash
Architecture:            x86_64
  CPU op-mode(s):        32-bit, 64-bit
  Address sizes:         39 bits physical, 48 bits virtual
  Byte Order:            Little Endian
CPU(s):                  12
  On-line CPU(s) list:   0-11
Vendor ID:               GenuineIntel
  Model name:            Intel(R) Xeon(R) E-2386G CPU @ 3.50GHz
```

## How to Run Your Own Ethereum Full Node

### 1. Installation

Download Reth

```bash
# clone repo
git clone https://github.com/paradigmxyz/reth
cd reth
# install reth into path directly
cargo install --locked --path bin/reth --bin reth
```
The binary will now be accessible as `reth` via the command line, and exist under your default `.cargo/bin` folder

OLD VERSION

Download the [latest version](https://github.com/paradigmxyz/reth/releases) of Reth and extract its contents.
```bash
# download the archive
wget -c https://github.com/paradigmxyz/reth/releases/download/v0.1.0-alpha.9/reth-v0.1.0-alpha.9-x86_64-unknown-linux-gnu.tar.gz

# extract contents
tar -xzf reth-v0.1.0-alpha.9-x86_64-unknown-linux-gnu.tar.gz
```

Do the same with the [latest version](https://github.com/sigp/lighthouse/releases/tag/v4.5.0) of lighthouse.
```bash
# download the archive
wget -c https://github.com/sigp/lighthouse/releases/download/v4.5.0/lighthouse-v4.5.0-x86_64-unknown-linux-gnu.tar.gz

# extract contents
tar -xzf lighthouse-v4.5.0-x86_64-unknown-linux-gnu.tar.gz
```

This builds Reth to `CARGO_HOME` or `$HOME/.cargo`. This directory needs to be on your `PATH` before you can run `$ reth`.

### 2. Run the clients

**Note on Good Practices**

To run processes perpetually, I use *screen*. `screen` command in Linux provides the ability to launch and use multiple shell sessions from a single ssh session. 

Brief Cheatsheet
```bash
# view existing screens
screen -ls
# make a new screen
screen -S rethnode
# leave screen without halting with ctrl-a, d 
# connect to existing screen
screen -r myscreen
```


Each client has many command line options which allow you to customize the configuration. Get an overview of command line options with 
```bash
reth node --help

lighthouse --help
```

I will be running the following commands

**Reth**
```bash
# cd into proper directory
RUST_LOG=info ./reth node --full \
--http --http.corsdomain "*" --http.api all \
--ws --ws.origins "*" --ws.api all 
```
*exit screen and create a new one*

**Lighthouse**
```bash
./lighthouse bn \
  --execution-endpoint http://localhost:8551 \
  --execution-jwt /home/ubuntu/.local/share/reth/mainnet/jwt.hex \ 
  --checkpoint-sync-url https://mainnet.checkpoint.sigp.io \
  --disable-deposit-contract-sync
```

Congratulations. You are now running an Ethereum client. Expect the syncing process to take ~50 hours, after which you may query the Ethereum blockchain (and submit transactions) directly from your node.

### Verify the chain is growing

[see here](https://reth.rs/run/mainnet.html#verify-the-chain-is-growing)

## Part B: External RPC Serving

We will configure an NGINX reverse proxy to serve an ethereum JSON-RPC at a custom domain.

Out goal is to serve an HTTP endpoint at https://mynode.mywebsite.com/rpc and a WSS endpoint at wss://mynode.mywebsite.com/ws.

### Step 1: Install NGINX

```bash
sudo apt-get update
sudo apt-get install nginx 
```

Navigate to `/etc/nginx/conf.d`

Create a file called `node.conf`

```bash
sudo nano node.conf 
```

And paste the following contents

```conf
server {

  listen 80;
  listen [::]:80;
  server_name 01.my.ip.10 mynode.mywebsite.com;

  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/nginx/ssl/mynode.mywebsite.com.crt;
  ssl_certificate_key /etc/nginx/ssl/mynode.mywebsite.com.key;

  location /ws {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_pass   http://127.0.0.1:8546/;
  }

  location /rpc {
      proxy_redirect off;
      proxy_pass    http://127.0.0.1:8545/;
  }
}
```

Now retrieve an SSL origin certificate from Cloudflare, and paste the `.crt` and `.pem` contents at:

`/etc/nginx/ssl/mynode.mywebsite.com.crt` and `/etc/nginx/ssl/mynode.mywebsite.com.key`, respectively.

Make sure your domain has an *A* record pointing to "mynode" (or whatever you picked as a subdomain).

You should now be able to go to your domain "mynode.mywebsite.com" and see the NGINX welcome page.


## Upgrading

Idk how to prune reth retroactively. I did add prune configuration to reth.toml, deleted DB, and restarted tho. 

**Update Reth**

- [docs](https://paradigmxyz.github.io/reth/installation/source.html#update-reth)

```bash
cd reth
git fetch
git checkout ${VERSION}
cargo build --release
```

We want this is cargo path `/home/ubuntu/.cargo/bin`. After build, it will exist in `/home/ubuntu/ethnode/reth/target/release/reth`.

Delete `/home/ubuntu/.cargo/bin/reth` and run `cp target/release/reth /home/ubuntu/.cargo/bin/reth`. You can then check with `reth --version`