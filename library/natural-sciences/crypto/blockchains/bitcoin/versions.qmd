---
title: "The Tech"
description: "I realized that although I am well versed in crypto, my technical knowledge is very concentrated in smart contract platforms. I have a good high level understanding of Bitcoin, but I have a new found motivation to learn the technical details, after discovering I was unfamiliar with many of the technicals. I am going to use this document to document my learning process."
page-layout: full
---

## Transaction Versions

Bitcoin has 4 transaction versions. A transaction, in each version, consists of an input and output. A transaction corresponds to a txid, which is a hash of the transaction.

1. Legacy

Input: 
- UTxO (Unspent Tx) consists of a txid and output #.
- Script signature, proves I have the private key of the address that owns the UTXO.

Output:
- Amount (satoshis)
- public spending script. 2 Main types
    - P2PKH (Pay to Public Key Hash) = 25 bytes: specific to a single public key. 
    - P2SH (Pay to Script Hash) = 23 bytes: Allows for multisigs.

2. Segwit (Segregated Witness)

Input:
- UTxO: same as legacy
- Signed script signature: same as legacy

Output:
- Amount (satoshis): same as legacy
- `<version> <witness program>`: When a legacy blockchain looks at this, it looks like anyone can spend this. A valid transaction, but it appears to not have a public key. But the soft fork enforces that the public key is spent through a "witness". So when you want to spend it, you prove you know what your witness is. When you spend a received tx, you append a witness. A miner will verify a witness before it is mined, but the txid doesnt include the witness. This increases available space in the blockchain. **This enables a practical lightning network** There are tricks where you can have more than one signature valid for a spending script, and have 2 diff txids. This was one of the attacks against Mt Gox to take money out.
    - P2WSH = 32 bytes:
    - P2WPKH = 22 bytes: 

There are 2 Segwit versions. About 50% of transactions are version 0 Segwit, the other are the old versions. Segwit was introduced in a soft fork.

Version 1 is Taproot.

3. Taproot

The main feature is a new signature algorithm, not on the elliptic curve. It is Schnorr. It is a signature scheme that is more efficient, and has some privacy benefits. It is a soft fork.
    - P2TR (Pay to Taproot) (Bech32m) = 32 bytes:

"tweak: with MAST. This allows you to hash scripts to get a root hash, and aggregate this with a master pubkey to get a new pubkey. This allows you to to prove the tx is valid without revealing the master pubkey.
