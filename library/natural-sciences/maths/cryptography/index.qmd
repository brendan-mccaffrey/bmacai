---
title: Cryptography
description: Where the value lies.
---

## Renowned Papers

- 1976 | [New Directions in Cryptography](https://t.co/xqjkEf7TEV)
- 1978 | [A Method for Obtaining Digital Signatures and Public-Key Cryptosystems](https://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=856E21BC2F75800D37FD611032C30B9C?doi=10.1.1.40.5588&rep=rep1&type=pdf)
- 1978 | [Secure Communication Over Insecure Channels](https://www.researchgate.net/publication/220424692_Secure_Communication_Over_Insecure_Channels)
- 1980 | [Protocols for Public Key Cryptosystems](https://ieeexplore.ieee.org/document/6233691)
- 1985 | [the Knowledge Complexity of Interactive Proof Systems](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.419.8132&rep=rep1&type=pdf)
- 1988 | [Non-interactive zero-knowledge and its applications](https://dl.acm.org/doi/10.1145/62212.62222)
- 1988 | [Use of Elliptic Curves in Cryptography](https://link.springer.com/content/pdf/10.1007/3-540-39799-X_31.pdf)
- 1989 | [The Knowledge Complexity of Interactive Proof Systems](https://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Proof%20Systems/The_Knowledge_Complexity_Of_Interactive_Proof_Systems.pdf)
- 1991 | [Proofs that Yield Nothing But Their Validity or All Languages in NP Have Zero-Knowledge Proof Systems](http://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Zero%20Knowledge/Proofs_That_Yield_Nothing_But_Their_Validity_or_All_Languages_in_NP_Have_Zero-Knowledge_Proof_Systems.pdf)
- 2000 | [Frontiers in Zero Knowledge](https://dspace.mit.edu/handle/1721.1/86616)
- 2000 | [Computationally Sound Proofs](https://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Proof%20Systems/Computationally_Sound_Proofs.pdf)
- 2011 | [From Extractable Collision Resistance to Succinct Non-Interactive Arguments of Knowledge, and Back Again](https://eprint.iacr.org/2011/443.pdf)
- 2012 | [Efficient Zero-Knowledge Argument for Correctness of a Shuffle](http://www0.cs.ucl.ac.uk/staff/J.Groth/MinimalShuffle.pdf)
- 2015 | [Verifying Computations Without Reexecuting Them](https://cacm.acm.org/magazines/2015/2/182636-verifying-computations-without-reexecuting-them/fulltext)
- 2018 | [Scalable, transparent, and post-quantum secure computational integrity](https://eprint.iacr.org/2018/046.pdf)
- 2019 | [Succinct Non-Interactive Zero Knowledge for a von Neumann Architecture](https://eprint.iacr.org/2013/879.pdf)
- 2020 | [Public-Coin Zero-Knowledge Arguments with (almost) Minimal Time and Space Overheads](https://www.iacr.org/cryptodb/data/paper.php?pubkey=30645)
- 2023 | [Proofs, Arguments, and Zero Knowledge](https://people.cs.georgetown.edu/jthaler/ProofsArgsAndZK.pdf)

## General Resources

- [Applied Cryptography](https://crypto.stanford.edu/~dabo/cryptobook/BonehShoup_0_4.pdf)
- [NSA: tor Stinks](https://cryptome.org/2013/10/nsa-tor-stinks.pdf)
- [Complete Knowledge: Preventing Encumbrance of Cryptographic Secrets](https://www.arijuels.com/wp-content/uploads/2023/01/Complete_Knowledge.pdf)
- [Binius: highly efficient proofs over binary fields](https://vitalik.eth.limo/general/2024/04/29/binius.html)
    - [implementation](https://github.com/ethereum/research/tree/master/binius)
- [Succint Arguments over Towers of Binary Fields](https://eprint.iacr.org/2023/1784)

## Primitives

- [Digital Signatures](https://en.wikipedia.org/wiki/Digital_signature)
- [Asymmetric (Public/Private Key) Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography)

### BLS

Boneh-Lynn-Shacham Signature Scheme

- [BLS Introduction](https://eth2book.info/altair/part2/building_blocks/signatures)
- [BLS Signature Scheme](https://tools.ietf.org/id/draft-boneh-bls-signature-00.txt)
- [Pragmatic signature aggregation with BLS](https://ethresear.ch/t/pragmatic-signature-aggregation-with-bls/2105?u=benjaminion)
- [BLS Signature for Busy People](https://gist.github.com/paulmillr/18b802ad219b1aee34d773d08ec26ca2)

## Attacks

- [Shucking Attacks](https://superuser.com/questions/1561434/how-do-i-crack-a-double-encrypted-hash/1561612#1561612)
- [Breaking Elliptic Curve - How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates](https://arxiv.org/abs/2306.08585)

## Proofs



A cryptographic proof must be **complete** and **sound**.

Alice wants to prove knowledge of something (she holds a secret key, for example) to Bob

- **Completeness:** If Alice performs the protocol honestly, will Bob be satisfied at the end of it?
- **Soundness:** If Alice successfully convinces Bob, then she must know the secret key.

### The Schnorr Identification Protocol

The Schnorr protocol, invented by Claus-Peter Schnorr in the 1980s, was concerned with identification.

Imagine that Alice has published her public key to the world, and later on wants to prove that she knows the secret key corresponding to that public key. This is the exact problem that we encounter in real-world protocols such as public-key SSH, so it turns out to be well-motivated.

Schnorr began with the assumption that the public key would be of a very specific format. 

Specifically, let $p$ be some prime number, and let $g$ be a [generator](https://en.wikipedia.org/wiki/Generating_set_of_a_group) of a [cyclic group](https://en.wikipedia.org/wiki/Cyclic_group) of prime-order $q$. To generate a keypair, Alice would first pick a random integer $a$ between 1 and $q$, and then compute the keypair as:

$$PK_A = g^a \: mod \: p, \; SK_A = a$$

Later on, she wants to prove knowledge of her secret key, she conducts the following interaction with Bob.

1. Alice:  Pick a random $k$ in range $1, \, ... \, , \, q$ and send Bob $h = g^k \: mod \: p$
2. Bob: Pick a random $c$ in range $1, \, ... \, , \, q$ and send Alice $c$
3. Alice: Send Bob $s = ac + k \: mod \: q$
4. Bob: Check that $g^s = PK^c_A \dot h \: mode \: p$

#### **Is this complete?**

Yes, just by looking at the math and performing substitution.

$$
\begin{aligned}
g^s & \equiv P K_A^c \cdot h & & \bmod p \\
g^{a c+k} & \equiv\left(g^a\right)^c \cdot g^k & & \bmod p \\
g^{a c+k} & \equiv g^{a c+k} & & \bmod p
\end{aligned}
$$


#### **Is it sound?**

We demonstrate soundness with a special algorithm called a knowledge extractor. A knowledge extractor (or just ‘Extractor’ for short) is a special type of Verifier that interacts with a Prover, and — if the Prover succeeds in completing the proof — the Extractor should be able to extract the Prover’s original secret.

To prove soundness for a proof of knowledge, we must show that an Extractor exists for every possible Prover.

The extractor for the Schnorr protocol is very simple: After step 3 is complete, rewind the interaction back to step 2. This tricks Alice into performing step 3 with two different $c$ values ($c1$ and $c2$) using the same $k$. 

The extractor can then solve the following equation to recover Alice's secret:

$$
\begin{array}{rr}
\left(s_1-s_2\right) /(c 1-c 2) & \bmod q \\
=\left(a c_1+k\right)-\left(a c_2+k\right) /(c 1-c 2) & \bmod q \\
=a(c 1-c 2) /(c 1-c 2) & \bmod q \\
& =a
\end{array}
$$

#### **Is it zero-knowledge?**

We can prove zero-knowledgeness by describing a Simulator that can interact with any possible Verifier and produce a 'simulated' transcript of the proof, even if the Simulator doesn't know the secret it's proving it knows.

The Schnorr protocol does not have such a Simulator. to make the proof work, we need to make an assumption: 

the Verifier needs to be "honest", meaning it will pick its challenge "c" using only its random number generator, *and will not choose this value based on any input we provide it*.

The Simulator does the following:

1. Output some initial $g^{k_1}$ as the Prover's first message, and find out what the Verifier chooses.
2. Rewind the Verifier, and pick a random integer $z$ in the range $1, \, ... \, , \, q - 1$
3. Compute $g^{k_2} = g^z \times g^{a(-c)}$ and output $g^{k_2}$ as the Prover's new initial message.
4. When the verifier challenges on $c$ again, output $z$.

This proves the protocol must be zero-knowledge *against an honest Verifier*.

#### **Making it non-interactive**

What if Bob is not online?

Turns out you can use a sufficient hash function to generate the challenge.

1. Prover picks $g^k$ just as in the interactive protocol.
2. Prover computes the challenge as $c = H(g^k \, || \, M)$ where $H()$ is a hash function, and $M$ is an optional and arbitrary message string.
3. Compute $s = ac + k \: mod \: q$ just as in the interactive protocol.

This non-interactive proof is not just a proof of knowledge, but it's also a signature scheme. That is, if you put a message into the (optional) value $M$, you obtain a signature on $M$, which can only be produced by someone who knows the secret key $a$. The resulting protocol is called the *Schnorr signature scheme*, and it’s the basis of real-world protocols like [EdDSA](https://en.wikipedia.org/wiki/EdDSA).




