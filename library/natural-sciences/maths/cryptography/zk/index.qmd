---
title: ZK
subtitle: Zero Knowledge
---

## Reads

#### **Foundational Papers**

- [New Directions in Cryptography, 1976](https://t.co/xqjkEf7TEV)
- [The Knowledge Complexity of Interactive Proof Systems, 1985](https://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Proof%20Systems/The_Knowledge_Complexity_Of_Interactive_Proof_Systems.pdf)
    - Pioneered foundation concept where a verifier is convinced of a statement's truth through interactions without the solution being revealed.
- [Algebraic Methods for Interactive Proof Systems, 1992](https://dl.acm.org/doi/pdf/10.1145/146585.146605)
    - Underscored the power of interactive proofs beyond NP statements.
    - Showed an unbounded prover can convince a polynomial-time verifier that a Boolean forumula is unsatisfiable.
    - Implies coNP problems (like UNSAT) can be verified with an efficient verifier, a feat not acheivable under the static proof model without the strong assumption that coNP = NP
- [IP = PSPACE](https://dl.acm.org/doi/pdf/10.1145/146585.146609)
    - Showed that the class of problems verifiable in polynomial time through interactive proofs aligns exactly with PSPACE
    - This class includes decision problems solvable in polynomial space, enveloping a broad spectrum of classes including P, NP, coNP, and beyond.
- [A note on efficient zer-knowledge proofs and arguements](https://people.csail.mit.edu/vinodv/6892-Fall2013/efficientargs.pdf)
    - Leveraged Probabilistically Checkable Proofs (PCPs)
    - Showed computationally sound (as opposed to statistically sound) proof system (argument system) can generate a succint argument poly-logarithmic in size of statement and the witness.
    - Soon a landmark result followed in the form of the PCP theorem, which stated that every decision problem in NP has a proof that can be verified with a high degree of confidence by looking at only a constant number of bits from the proof, chosen at random.


#### **Papers**

- [Public-coin zero-knowledge arguments with (almost) minimal time and space overheads, 2020](https://t.co/odrV7LZdIy)
- [A method for obtaining digital signatures and public-key cryptosystems](https://people.csail.mit.edu/rivest/Rsapaper.pdf)
- [Proofs, Arguments, and Zero-Knowledge](https://people.cs.georgetown.edu/jthaler/ProofsArgsAndZK.pdf)
- [A Zero Knowledge Sumcheck and its Applications](https://eprint.iacr.org/2017/305.pdf)
- [On Proving Pairings](https://eprint.iacr.org/2024/640.pdf)

#### **Educational Resources**

- [ZK Jargon Decoder](https://nmohnblatt.github.io/zk-jargon-decoder/foreword.html)
- [Rareskills Book of Zero Knwledge](https://www.rareskills.io/zk-book)
- [ZKP Illustrated Primer Part 1](https://blog.cryptographyengineering.com/2014/11/27/zero-knowledge-proofs-illustrated-primer/)
- [ZKP Illustrated Primer Part 2](https://blog.cryptographyengineering.com/2017/01/21/zero-knowledge-proofs-an-illustrated-primer-part-2/)
- [ZkIntro](https://zkintro.com/articles/friendly-introduction-to-zero-knowledge)
- [17 Misconceptions about SNARKs](https://a16zcrypto.com/posts/article/17-misconceptions-about-snarks/)

#### **Resource Compilations**

- [Zero Knowledge A-Z](https://graph.org/ZK-SNARKs-VS-ZK-STARKs-01-10)
- [Hickup's ZK Journey](https://sunrise-clerk-234.notion.site/Hickup-s-ZK-Journey-affa9ce9cdf44a33b3549c37f908521a)
- [ZK "Canon" by A16z](https://a16zcrypto.com/zero-knowledge-canon/)
- [ZKP.Science](https://zkp.science/)
- [Youtube RiscZero Study Club](https://www.youtube.com/watch?v=v4HIwaqmIxk&list=PLcPzhUaCxlCirUkJY0ltpjdtzWcz5U_6y&index=3)
- [Introduction to Zero Knowledge: Video Tutorial](https://www.youtube.com/watch?v=6uGimDYZPMw&list=PL8Vt-7cSFnw29cLUVqAIuMlg1QJ-szV0K&index=1)

## Proof Systems

- [Binius](https://vitalik.eth.limo/general/2024/04/29/binius.html)
- [Circle STARKs](https://eprint.iacr.org/2024/278)
- [Jolt: SNARKs for Virtual Machines via Lookups](https://eprint.iacr.org/2023/1217)

### Practical Applications

- [Applied ZK](https://t.co/6TvEniH6kA)
- [Crypto Regulations, Privacy and Beyond](https://web3-with-a16z.simplecast.com/episodes/crypto-regulations-sanctions-compliance-aml-ofac-news-explained)
- [ZK Benchmarks](https://www.zk-bench.org/)

## Technical Deep Dives

![](https://vitalik.eth.limo/images/plonk-files/Tradeoffs.png)

### General

- [Overview of Verifiable Computing](https://t.co/nkwNAjnRr6)
- [Interactive Proofs](https://t.co/xPBWXvKwbY)
- [Succint Non-Interactive Zero Knowledge for a von Neumann Architecture](https://eprint.iacr.org/2013/879.pdf)
- [Streaming Zero-Knowledge Proofs](https://arxiv.org/abs/2301.02161)
- [Fast Amortized KZG Proofs](https://eprint.iacr.org/2023/033.pdf)
- [ZK Development Playground](https://zkrepl.dev/)
- [Beginner Intro to Coding ZK Proofs](https://dev.to/spalladino/a-beginners-intro-to-coding-zero-knowledge-proofs-c56)

### PIOP

- [Polynomial Interactive Oracle Proof](https://nmohnblatt.github.io/zk-jargon-decoder/definitions/polynomial_interactive_oracle_proof.html)

### STARKs

- [Vitalik Intro 1](https://vitalik.ca/general/2017/11/09/starks_part_1.html)
- [Vitalik Intro 2](https://vitalik.ca/general/2017/11/22/starks_part_2.html)
- [Vitalik Intro 3](https://vitalik.ca/general/2018/07/21/starks_part_3.html)

### SNARKs

- [Vitalik Intro 1](https://medium.com/@VitalikButerin/quadratic-arithmetic-programs-from-zero-to-hero-f6d558cea649)
- [Vitalik Intro 2](https://medium.com/@VitalikButerin/exploring-elliptic-curve-pairings-c73c1864e627)
- [Vitalik Intro 3](https://medium.com/@VitalikButerin/zk-snarks-under-the-hood-b33151a013f6)
- [Measuring SNARK Performance](https://t.co/tXwTlfEi5g)
- [Why and How ZK-SNARK Works](https://arxiv.org/abs/1906.07221)
- [Why and How ZK-SNARK Works](https://arxiv.org/abs/1906.07221)
- [zkSNARKs Under the Hood](https://github.com/tarassh/zkSNARK-under-the-hood/tree/main)
- [Under the hood of zkSNARK Groth16 protocol | part 1](https://medium.com/coinmonks/under-the-hood-of-zksnark-groth16-protocol-2843b0d1558b)
- [Using GKR inside a SNARK to reduce the cost of hash verification down to 3 constraints](https://ethresear.ch/t/using-gkr-inside-a-snark-to-reduce-the-cost-of-hash-verification-down-to-3-constraints/7550/3)


### PLONKs

- [PLONK Explainer by Vitalik](https://vitalik.ca/general/2019/09/22/plonk.html)
- [PLONK ePrint](https://eprint.iacr.org/2019/953.pdf)
- [PLONK implemented, from scratch, in python](https://github.com/tarassh/zkSNARK-under-the-hood/blob/main/plonk2.ipynb)


## Example: The 3-Color Graph Coloring Problem

A Zero-Knowledge Proof (ZKP) allows a prover to demonstrate knowledge of some secret without revealing the secret itself. Let's illustrate this using a graph coloring problem.

##### **Problem Statement**
Imagine Alice has a graph $(G = (V, E))$, where $(V)$ is the set of vertices and $(E)$ is the set of edges. Alice claims she can 3-color the graph so that no adjacent vertices share the same color. Bob wants to verify this claim without learning the actual coloring.

##### **The ZKP Protocol**
1. **Commitment**: Alice chooses a random permutation of her 3-coloring and commits to it, sending a cryptographic hash of each vertex's color to Bob.
2. **Challenge**: Bob randomly selects an edge $((u, v) \in E)$
3. **Response**: Alice reveals the colors of vertices $(u)$ and $(v)$.
4. **Verification**: Bob checks if the revealed colors are different and match the hash commitments.

Through repeated iterations, Bob becomes increasingly confident that Alice has a valid 3-coloring, but gains no knowledge about the coloring itself.

##### **Math Syntax**
- Graph: $(G = (V, E))$
- Colors: $(\{ \text{Red}, \text{Green}, \text{Blue} \})$
- Random Permutation: $(\pi)$
- Hash Commitment for vertex $(v): ( H(\pi(\text{color}(v))) )$

This example shows that ZKPs can provide robust verification without sacrificing the secrecy of the information involved.

##### **Conclusion**

Graph three coloring is NP-complete. Thus, any protocol that can prove a solution to this problem can be used to prove any statement in the class NP.

Three critical properties a ZKP must satisfy:

- Completeness: If the Prover is honest, then she will eventually convince the Verifier.
- Soundness: The Prover can only convince the Verifier if the statement is true.
- Zero-knowledge(ness): The Verifier learns no information beyond the fact that the statement is true.